        -:    0:Source:minmax_nonbranch.c
        -:    0:Graph:minmax_nonbranch.gcno
        -:    0:Data:minmax_nonbranch.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:
function minmax called 1 returned 100% blocks executed 100%
        1:    3:void minmax(int a[], int b[], int n) {
        5:    4:    for (int i = 0; i < n; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:    5:        if (a[i] > b[i]) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:    6:            int tmp = a[i];
        2:    7:            a[i] = b[i];
        2:    8:            b[i] = tmp;
        -:    9:        }
        -:   10:    }
        1:   11:}
        -:   12:
        -:   13:
function minmax_non_branching called 1 returned 100% blocks executed 100%
        1:   14:void minmax_non_branching(int a[], int b[], int n) {
        5:   15:    for (int i = 0; i < n; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:   16:        int diff = a[i] - b[i];
        -:   17:        
        -:   18:        // Create a mask based on the sign of the difference
        4:   19:        int mask = diff >> (sizeof(int) * 8 - 1);
        -:   20:        
        -:   21:        // If a[i] > b[i], diff will be positive, mask will be 0
        -:   22:        // If a[i] <= b[i], diff will be negative, mask will be -1
        -:   23:
        -:   24:        // Apply the mask to swap the values if needed without branching
        4:   25:        int min = b[i] + (diff & mask);
        4:   26:        int max = a[i] - (diff & mask);
        -:   27:        
        4:   28:        a[i] = min;
        4:   29:        b[i] = max;
        -:   30:    }
        1:   31:}
        -:   32:
function main called 1 returned 100% blocks executed 100%
        1:   33:int main() {
        1:   34:    int a[] = {5, 2, 9, 3};
        1:   35:    int b[] = {3, 4, 1, 8};
        1:   36:    int n = sizeof(a) / sizeof(a[0]);
        -:   37:
        1:   38:    minmax(a, b, n);
call    0 returned 1
        -:   39:
        1:   40:    int a2[] = {5, 2, 9, 3};
        1:   41:    int b2[] = {3, 4, 1, 8};
        -:   42:
        1:   43:    minmax_non_branching(a2, b2, n);
call    0 returned 1
        -:   44:
        5:   45:    for (int i = 0; i < n; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:   46:        printf("minmax: a[%d] = %d, b[%d] = %d\n", i, a[i], i, b[i]);
call    0 returned 4
        4:   47:        printf("non-branching: a2[%d] = %d, b2[%d] = %d\n", i, a2[i], i, b2[i]);
call    0 returned 4
        -:   48:    }
        -:   49:
        1:   50:    return 0;
        -:   51:}
